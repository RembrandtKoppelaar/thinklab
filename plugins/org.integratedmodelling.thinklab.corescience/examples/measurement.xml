<?xml version="1.0" encoding="UTF-8"?>
<?OPAL profile="tcs" version="1.0"?>

<!-- This observation of the density of biomass vegetation illustrates usage and hard-core details 
	 of the core science ontologies.
     
     The following is written in an XML that approximates RDF, in a way the OPAL plug-in for 
     thinklab understands. Just a much more readable way to specify individuals. Look at the
     ontologies when trying to understand the specifications below. In general:
     
     * Node names that start with an uppercase letter map to classes and define instances of
       those classes;
     * Node names that start with an uppercase letter map to properties;
     * Node textual content is used for properties when instances of the classes they
       link to can be specified in ThinkLab using literals.
     
     This example uses ontologies from CoreScience, Geospace and Time. Namespace prefixes
     identify the ontology.
     
     Both of these are "point" observation with time/space extents of granularity 1 (one place,
     one time). The geospace and time ontologies also specify multiple granularity extents, that 
     can be used to annotate entire datasets with multiple measurements of the same observable 
     seen as one observation. In order to do so, values will have to be instances of 
     source:DataSource (which also admits functions and statistical distributions as 
     value sources). In this case, we just use simple value literals.
     
     First (easy) thing to note: our main object is a measurement (isa Observation) of biomass 
     density, not a biomass density. The actual physical property is the observable linked to
     the measurement. We assume we don't care about the time of the observation, just the space.
      -->
<measurement:Measurement id="obsGrassBiomassDensity">

	<!-- looks simple, but hasUnit specializes hasConceptualModel and admits literals. Lots of
		 thought behind this one, and it triggers unit parsing and validation in ThinkLab.  
		 
		 Note that we do not need to attach semantic types for the different dimensions of
		 the unit product [eg kg[grass]/m²[crop]). They would make no sense as the observation 
		 is simply a density, and this unit is an abstract conceptual model for density. This
		 case is interesting (and confusing) because a semantically rich unit holds apparent 
		 meaning. But that's just because it can be related directly to the context. The
		 contextualization relationships capture these meanings properly. Semantically annotating
		 the unit is dependent on this "chance" factor - think e.g. of how "acceleration" could
		 be annotated this way. 
		 
		 This being an intensive property contextualized over an extent, ThinkLab will match
		 the m² component to the areal extent and make sure that we can "reason" on it, e.g.
		 produce the total mass by multiplying the density by an area. Such relationships 
		 are hardly capturable in OWL and they're done in the observation API.
		 -->
	<measurement:hasUnit>kg·m²</measurement:hasUnit>
	
	<!-- same: hasValue specializes hasValueModel and admits number literals. This being a 
	     Measurement, the value conforms with a ContinuousObservationSpace model, which is
	     an actual object in the API and validates the value before it is paired to the 
	     measurement.  -->
 	<measurement:hasValue>123</measurement:hasValue>
 	
 	<!-- the Observable for a Measurement must be a physical property. MassArealDensity is in
 		 the representation ontology and imposes dimensional constraints for the measurement,
 		 which are validated by the conceptual model. This class sets the semantic type of
 		 what is observed: domain ontologies can specialize it as necessary. By adopting a 
 		 type from PhysicalProperty, we establish the extensive/intensive properties which
 		 allow us to aggregate and disaggregate properly, and to operate correctly in 
 		 operations (e.g. multiplying this by an Area will generate a Mass). If remapping the
 		 distribution context to a different one, this quantity will be partitioned as
 		 necessary.
 	-->
	<observation:hasObservable>
		<representation:MassArealDensity id="GrassBiomass">
			<observation:pertainsToEntity>
				<!--  all physical properties must be of something. Here's what. -->
				<agro:GrassVegetation id="grassOfInterest" />
			</observation:pertainsToEntity>
		</representation:MassArealDensity>
	</observation:hasObservable>
	
	<!-- hasDistributionContext specializes hasObservationContext and establishes a relationship
		between an intensive measurement and an extent that it refers to. This allows us to, 
		e.g., calculate the total Mass by multiplying with the area. -->
	<measurement:hasExtent>
	
		<!-- the context is an area measurement, not a "space". The observation that describes 
			 the actual space provides the context for the area observable, which is again a
			 physical property. Any observation that contextualizes another through the 
			 hasDistributionContext must be an extensive physical property. -->
		<measurement:Measurement id="obsSiteArea">
			<measurement:hasUnit>km²</measurement:hasUnit>
			<measurement:hasValue>2.33</measurement:hasValue>
			
			<!-- the description of the observable captures the identity of the space and
				 observes its location. All physical properties must identify the owl:Thing
				 they are a property of. This thing is a crop here, and it is contextualized
				 by an observation of pure space - not a property of the space.
				 
				 This shows, e.g., how modelling the spatial polygon as a property of the Crop
				 would not help us here. There's nothing wrong with using it to capture other 
				 information and referencing it in the specs below, but the actual property
				 would be useless to the purposes of defining the observation.
				 -->
			<observation:hasObservable>
				<representation:Area id="myCropArea">
					<measurement:pertainsToEntity>
						<geospace:SpatialRegion id="myCrop">
							<observation:hasObservationContext>
								<!-- the areal location is a specialized observation of
									space that ThinkLab allows to define through a literal: a WKT
									polygon here. Other classes available in the geospace ontology
									represent feature sets, locations, regular grids etc. 
								-->
								<geospace:ArealLocation>POLYGON(12 33 2 3 2 4 54)</geospace:ArealLocation>
							</observation:hasObservationContext>
						</geospace:SpatialRegion>	
					</measurement:pertainsToEntity>
				</representation:Area>
			</observation:hasObservable>
		</measurement:Measurement>
	</measurement:hasExtent>
	
</measurement:Measurement>