<?xml version="1.0" encoding="windows-1252"?>
<rdf:RDF
    xmlns="http://www.integratedmodelling.org/ks/thinklab/thinklab-core.owl#"
    xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema#"
    xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
    xmlns:owl="http://www.w3.org/2002/07/owl#"
  xml:base="http://www.integratedmodelling.org/ks/thinklab/thinklab-core.owl">
  <owl:Ontology rdf:about=""/>
  <owl:Class rdf:ID="StorageType">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Base storage type classes for use to create the basic ThinkLab literal types. Can be made equivalent to other storage types provided by more sophisticated representation ontologies.</rdfs:comment>
  </owl:Class>
  <owl:Class rdf:ID="Algorithm">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Utility class to derive other Algorithm classes for. These correspond to Algorithm literals that are bound to specific interpreters and represent executable code; the specific class selects the interpreter, which must be provided by a plug-in. It is not necessary to derive such classes from Algorithm now; it is provided for cleanliness and for possible future implementations.</rdfs:comment>
  </owl:Class>
  <owl:Class rdf:ID="NumericInterval">
    <rdfs:subClassOf>
      <owl:Class rdf:ID="Interval"/>
    </rdfs:subClassOf>
  </owl:Class>
  <owl:Class rdf:ID="Real">
    <rdfs:subClassOf>
      <owl:Class rdf:ID="Number"/>
    </rdfs:subClassOf>
    <owl:versionInfo>Created by UVM Affiliate on Tue Nov 28 16:05:41 EST 2006</owl:versionInfo>
    <rdfs:label>Real</rdfs:label>
  </owl:Class>
  <owl:Class rdf:about="#Interval">
    <AbstractClass rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >true</AbstractClass>
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Abstract class subsuming different interval types (usually corresponding to literals)</rdfs:comment>
  </owl:Class>
  <owl:Class rdf:ID="Constraint">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Class Constraint is used to enable the definition of ThinkLab Constraint literals in ontologies. Constraints can be used as additional restrictions on a class or as queries on a knowledge base. Note that in order to extend the definition of a class with a constraint, the AdditionalRestrictions annotation should be used. The Constraint literal is provided to store Constraints in a knowledge model as first-class objects whenever it becomes necessary.</rdfs:comment>
  </owl:Class>
  <owl:Class rdf:ID="FloatingPoint">
    <rdfs:subClassOf rdf:resource="#Real"/>
  </owl:Class>
  <owl:Class rdf:ID="Boolean">
    <rdfs:subClassOf rdf:resource="#StorageType"/>
  </owl:Class>
  <owl:Class rdf:ID="LongFloatingPoint">
    <rdfs:subClassOf rdf:resource="#Real"/>
  </owl:Class>
  <owl:Class rdf:about="#Number">
    <rdfs:subClassOf rdf:resource="#StorageType"/>
  </owl:Class>
  <owl:Class rdf:ID="LongInteger">
    <rdfs:subClassOf>
      <owl:Class rdf:ID="Integer"/>
    </rdfs:subClassOf>
  </owl:Class>
  <owl:Class rdf:ID="Text">
    <rdfs:subClassOf rdf:resource="#StorageType"/>
  </owl:Class>
  <owl:Class rdf:ID="ShortInteger">
    <rdfs:subClassOf>
      <owl:Class rdf:about="#Integer"/>
    </rdfs:subClassOf>
    <owl:versionInfo>Created by UVM Affiliate on Tue Nov 28 16:06:05 EST 2006</owl:versionInfo>
    <rdfs:label>ShortInteger</rdfs:label>
  </owl:Class>
  <owl:Class rdf:about="#Integer">
    <rdfs:subClassOf rdf:resource="#Number"/>
  </owl:Class>
  <owl:ObjectProperty rdf:ID="ExtendedLiteralProperty">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Superproperty for any property that links to an instance of a complex type whose value is expressed as a literal and will be parsed and converted to a Java object in Thinklab. The literal value of the object will be looked for in the LiteralValue annotation of the linked OWL individual.</rdfs:comment>
  </owl:ObjectProperty>
  <owl:ObjectProperty rdf:ID="ClassificationProperty">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Superproperty for any property that links to an instance of a  type that represent its own class. Its value will be converted to the class itself in the ThinkLab API.</rdfs:comment>
  </owl:ObjectProperty>
  <owl:AnnotationProperty rdf:ID="AdditionalRestrictions">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Accommodates an additional set of restrictions that cannot be expressed in OWL, in the form of a Constraint list literal. Given that these are integral to the definition of a class, I think it is better to put them in an associated annotation than in an actual literal of class Constraint linked to it, which would "contaminate" the knowledge model. If present, the constraint will be checked against any concept or instance when the is() method is called on them with the constrained class as a parameter.</rdfs:comment>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
  </owl:AnnotationProperty>
  <owl:AnnotationProperty rdf:ID="LiteralValue">
    <rdfs:range rdf:resource="http://www.w3.org/2001/XMLSchema#string"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#FunctionalProperty"/>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </owl:AnnotationProperty>
  <owl:AnnotationProperty rdf:ID="LiteralClass">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Identifies an instance that is used to represent the value of a class that is not supposed to be used through instances. The value does not matter, but "true" is suggested. While it is not necessary to add the annotation to a "class instance" created in Protege' or other editor, its use prevents duplications and optimizes the working of the system when relationships are created through the API.</rdfs:comment>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </owl:AnnotationProperty>
  <owl:AnnotationProperty rdf:ID="AbstractClass">
    <rdfs:comment rdf:datatype="http://www.w3.org/2001/XMLSchema#string"
    >Identifies a class that cannot have an instance implementation in ThinkLab. It does not mandate anything at the OWL level, but ThinkLab will refuse to create an IInstance for it even if one exists in OWL. The simple presence of this annotation in a class is enough to indicate abstract status, unless its value is "false". The absence of the property means that the class is not abstract.</rdfs:comment>
    <rdf:type rdf:resource="http://www.w3.org/2002/07/owl#DatatypeProperty"/>
  </owl:AnnotationProperty>
</rdf:RDF>
