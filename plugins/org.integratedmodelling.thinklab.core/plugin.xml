<?xml version="1.0" ?>
<!DOCTYPE plugin PUBLIC "-//JPF//Java Plug-in Manifest 1.0" "http://jpf.sourceforge.net/plugin_1_0.dtd">
<plugin
   id="org.integratedmodelling.thinklab.core"
   version="0.8.0"
   class="org.integratedmodelling.thinklab.Thinklab">
	<runtime>
		<library id="core" path="classes/" type="code">
			<export prefix="*" />
		</library>
		<library type="resources" path="ontologies/" id="ontologies" />
		<library type="resources" path="config/" id="config" />
		<library type="code" id="agg_classes" path="lib/agg_V1622_classes.jar"/>
		<library type="code" id="ant" path="lib/ant-1.6.5.jar"/>
		<library type="code" id="antlr"  path="lib/antlr-2.7.6.jar"/>
		<library type="code" id="amtlr-runtime"  path="lib/antlr-runtime-3.0.jar"/>
		<library type="code" id="ant-nodeps"  path="lib/ant-nodeps-1.6.5.jar"/>
		<library type="code" id="ant-optional"  path="lib/ant-optional-1.5.1.jar"/>
		<library type="code" id="asm"  path="lib/asm.jar"/>
		<library type="code" id="asm-attris"  path="lib/asm-attrs.jar"/>
		<library type="code" id="bsf"  path="lib/bsf.jar"/>
		<library type="code" id="bsh"  path="lib/bsh-1.2b7.jar">
			<export prefix="*" />
		</library>
		<library type="code" id="common"  path="lib/common-2.2.1.jar">
			<export prefix="*" />
		</library>
		<library type="code" id="commons-beanutils"  path="lib/commons-beanutils-1.7.0.jar"/>
		<library type="code" id="commons-codec"  path="lib/commons-codec-1.3.jar"/>
		<library type="code" id="commons-collections"  path="lib/commons-collections-3.2.jar">
			<export prefix="*"/>
		</library>
		<library type="code" id="commons-collections-testframework"  path="lib/commons-collections-testframework-3.2.jar"/>
		<library type="code" id="commons-dbcp"  path="lib/commons-dbcp-1.2.2.jar">
			<export prefix="*" />
		</library>
		<library type="code" id="commons-httpclient"  path="lib/commons-httpclient-3.0.1.jar"/>
		<library type="code" id="commons-jxpath"  path="lib/commons-jxpath-1.2.jar"/>
		<library type="code" id="commons-lang"  path="lib/commons-lang-2.2.jar"/>
		<library type="code" id="commons-logging"  path="lib/commons-logging-1.1.1.jar"/>
		<library type="code" id="commons-pool"  path="lib/commons-pool-1.3.jar">
			<export prefix="*" />
		</library>
		<library type="code" id="concurrent"  path="lib/concurrent-1.3.4.jar"/>
		<library type="code" id="http"  path="lib/http.jar"/>
		<library type="code" id="icu4j"  path="lib/icu4j_3_4.jar"/>
		<library type="code" id="iri"  path="lib/iri.jar"/>
		<library type="code" id="jena"  path="lib/jena.jar"/>
		<library type="code" id="jgrapht"  path="lib/jgrapht.jar">
			<export prefix="*" />
		</library>
		<library type="code" id="jopt-simple"  path="lib/jopt-simple-2.4-beta2.jar"/>
		<library type="code" id="junit"  path="lib/junit.jar">
			<export prefix="*" />
		</library>
		<library type="code" id="kazuki"  path="lib/kazuki.jar"/>
		<library type="code" id="mvel"  path="lib/mvel-1.3.1-java1.4.jar">
				<export prefix="*" />
		</library>
		<library type="code" id="owlapi"  path="lib/owlapi-bin.jar"/>
		<library type="code" id="owlsyntax"  path="lib/owlsyntax.jar"/>
		<library type="code" id="pellet"  path="lib/pellet.jar"/>
		<library type="code" id="protege"  path="lib/protege.jar">
				<export prefix="*" />
		</library>
		<library type="code" id="protege-owl"  path="lib/protege-owl.jar">
				<export prefix="*" />
		</library>
		<library type="code" id="rdf-api"  path="lib/rdf-api-2001-01-19.jar"/>
		<library type="code" id="resolver"  path="lib/resolver.jar"/>
		<library type="code" id="serializer"  path="lib/serializer.jar"/>
		<library type="code" id="stax-api"  path="lib/stax-api-1.0.jar"/>
		<library type="code" id="swrl-jess-bridge"  path="lib/swrl-jess-bridge.jar"/>
		<library type="code" id="wstx-asl"  path="lib/wstx-asl-3.0.0.jar"/>
		<library type="code" id="xercesImpl"  path="lib/xercesImpl-2.7.1.jar"/>
		<library type="code" id="xml-apis"  path="lib/xml-apis-1.0.b2.jar">
				<export prefix="*" />
		</library>
		<library type="code" id="xml-apis-xerces"  path="lib/xml-apis-xerces-2.7.1.jar">
				<export prefix="*" />
		</library>
		<library type="code" id="xmlParserAPIs"  path="lib/xmlParserAPIs.jar">
				<export prefix="*" />
		</library>
		<library type="code" id="xsd"  path="lib/xsd-2.2.2.jar"/>
		<library type="code" id="xsdlib"  path="lib/xsdlib-20050614.jar"/>	
	</runtime>

	<!-- declare an ontology -->
	<extension-point id="ontology">
		<parameter-def id="url" />
		<parameter-def id="concept-space" />
		<parameter-def id="description" multiplicity="none-or-one" />
	</extension-point>

	<!-- declare a kbox, optionally loading initial content if it's empty -->
	<extension-point id="kbox">
		<parameter-def id="protocol" />
		<parameter-def id="url" />
		<parameter-def id="id" />
		<parameter-def id="initial-content" multiplicity="none-or-one" />
		<parameter-def id="metadata-schema" multiplicity="none-or-one" />
		<parameter-def id="description" multiplicity="none-or-one" />
	</extension-point>

	<!-- declare a kbox handler -->
	<extension-point id="kbox-handler">
		<parameter-def id="class" />
		<parameter-def id="protocol"  />
		<parameter-def id="description" multiplicity="none-or-one" />
	</extension-point>

	<extension-point id="session-listener">
		<parameter-def id="class" />
		<parameter-def id="description" multiplicity="none-or-one" />
	</extension-point>

	<extension-point id="knowledge-loader">
		<parameter-def id="class" />
		<parameter-def id="format" />
		<parameter-def id="description" multiplicity="none-or-one" />
	</extension-point>

	<extension-point id="knowledge-listener">
		<parameter-def id="class" />
		<parameter-def id="description" multiplicity="none-or-one" />
	</extension-point>

	<extension-point id="knowledge-importer">
		<parameter-def id="class" />
		<parameter-def id="format"  />
		<parameter-def id="description" multiplicity="none-or-one" />
	</extension-point>

	<extension-point id="language-interpreter">
		<parameter-def id="class" />
		<parameter-def id="language-type" />
		<parameter-def id="language-name" />
		<parameter-def id="description" multiplicity="none-or-one" />
		<parameter-def id="example" multiplicity="any" />
	</extension-point>

	<!-- 
		Literal validators can also be associated with XSD types. If that is present, the semantic
		type and validator will be used to create the associated IValue when a dataproperty is 
		found that links to that XSD type.
	-->
	<extension-point id="literal-validator">
		<parameter-def id="class" />
		<parameter-def id="semantic-type" />
		<parameter-def id="xsd-uri" multiplicity="none-or-one" />
		<parameter-def id="description" multiplicity="none-or-one" />
		<parameter-def id="example" multiplicity="any" />
	</extension-point>

	<extension-point id="instance-constructor">
		<parameter-def id="class" />
		<parameter-def id="semantic-type" />
		<parameter-def id="description" multiplicity="none-or-one" />
	</extension-point>

	<extension-point id="command-handler">
		<parameter-def id="class" />
		<parameter-def id="command-name" />
		<parameter-def id="command-description" />
		<parameter-def id="return-type" multiplicity="none-or-one" />
		<parameter-def id="argument-names" multiplicity="none-or-one" />
		<parameter-def id="argument-types" multiplicity="none-or-one" />
		<parameter-def id="argument-descriptions" multiplicity="none-or-one" />
		<parameter-def id="optional-argument-names" multiplicity="none-or-one" />
		<parameter-def id="optional-argument-types" multiplicity="none-or-one" />
		<parameter-def id="optional-argument-descriptions" multiplicity="none-or-one" />
		<parameter-def id="optional-argument-default-values" multiplicity="none-or-one" />
		<parameter-def id="option-names" multiplicity="none-or-one" />
		<parameter-def id="option-long-names" multiplicity="none-or-one" />
		<parameter-def id="option-types" multiplicity="none-or-one" />	
		<parameter-def id="option-argument-labels" multiplicity="none-or-one" />	
		<parameter-def id="option-descriptions" multiplicity="none-or-one" />	
		<parameter-def id="example" multiplicity="any" />
	</extension-point>
	
	<extension plugin-id="org.integratedmodelling.thinklab.core" point-id="literal-validator" id="text-validator">
		<parameter id="class" value="org.integratedmodelling.thinklab.validators.TextValidator"/>
		<parameter id="semantic-type" value="thinklab-core:Text"/>
	</extension>
	
	<extension plugin-id="org.integratedmodelling.thinklab.core" point-id="literal-validator" id="number-validator">
		<parameter id="class" value="org.integratedmodelling.thinklab.validators.NumberValidator"/>
		<parameter id="semantic-type" value="thinklab-core:Number"/>
	</extension>

</plugin>
