/**
 * ColorMap.java
 * ----------------------------------------------------------------------------------
 * 
 * Copyright (C) 2008 www.integratedmodelling.org
 * Created: Jun 5, 2008
 *
 * ----------------------------------------------------------------------------------
 * This file is part of ImageMap.
 * 
 * ImageMap is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 * 
 * ImageMap is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with the software; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 * 
 * ----------------------------------------------------------------------------------
 * 
 * @copyright 2008 www.integratedmodelling.org
 * @author    Sergey Krivov
 * @date      Jun 5, 2008
 * @license   http://www.gnu.org/licenses/gpl.txt GNU General Public License v3
 * @link      http://www.integratedmodelling.org
 **/

package org.integratedmodelling.utils.image;

import java.awt.Color;
import java.awt.image.IndexColorModel;
import java.io.File;
import java.io.IOException;

import org.integratedmodelling.thinklab.exception.ThinklabIOException;

/**
 * this is a wrapper around IndexColorModel, just for convenience
 * @author Sergey Krivov
 *
 */
public class ColorMap {
	
	IndexColorModel model;
	int levels;

	private ColorMap(IndexColorModel cmodel, int levels) {
		this.model = cmodel;
		this.levels = levels;
	}
	
	/**
	 * 
	 */
	public ColorMap(int bits, int[] indexes, Color[] colors, Color missingIndexColor) {
		
		int maxIndex=0;
		levels = colors.length;
		for (int i = 0; i < indexes.length; i++) {
			if(indexes[i]>maxIndex){
				maxIndex=indexes[i];
			}
		}

		Color[] colorArray = new Color[maxIndex+1];
		for (int i = 0; i < colorArray.length; i++) {
			colorArray[i]= missingIndexColor;
		}
		
		for (int i = 0; i < indexes.length; i++) {
			colorArray[indexes[i]]=colors[i];
		}
		
		createColorModel(bits, colorArray);
	}
	
	public ColorMap(int bits, Color[] colors) {
		levels = colors.length;
		createColorModel(bits, colors);
	}
	
	/**
	 * Return a black mask where the index determines transparency, from opaque (0)
	 * to fully transparent (max levels).
	 * 
	 * @param levels
	 * @return
	 */
	public static ColorMap alphamask(int levels) {
		
		byte[] r = new byte[levels];
		byte[] g = new byte[levels];
		byte[] b = new byte[levels];		 
		byte[] a = new byte[levels];
		
		for (int i = 0; i < levels; i++) {
			r[i]= g[i] = b[i] = 0;
			a[i] = (byte)(levels - (256/levels)*i);
		}
			 
		return new ColorMap(new IndexColorModel(8,levels,r,g,b,0), levels);
	}
	
	/**
	 * Make N grey levels 
	 * @param levels
	 * @return
	 */
	public static ColorMap greyscale(int levels) {

		/*
		 * grey colormap, to be changed later
		 */
		Color[] greys = new Color[levels];
		int incr = 256/levels;		
		for (int i = 0; i < levels; i++) {			
			int level = i * incr;
			greys[i] = new Color(level, level, level);
		}
		
		return new ColorMap(8, greys);
	}

	public File getColorbar(int h, File fileOrNull) throws ThinklabIOException {
		
		if (fileOrNull == null)
			try {
				fileOrNull = File.createTempFile("cbar", ".png");
			} catch (IOException e) {
				throw new ThinklabIOException(e);
			}
		
		int[][] cdata = new int[256][h];
		int incr = 256/levels;
		for (int i = 0; i < 256; i += incr) {
			int col = i * incr;
			for (int y = 0; y < h; y++) 
				for (int x = i; x < i+incr; x++)
					cdata[x][y] = col;		
		}
			
		ImageUtil.createImageFile(cdata, 265, h, this, fileOrNull.toString(), false);
		
		return fileOrNull;
	}
	
	/**
	 * Make N green levels 
	 * @param levels
	 * @return
	 */
	public static ColorMap greenscale(int levels) {

		/*
		 * grey colormap, to be changed later
		 */
		Color[] greens = new Color[levels];
		
		int incr = 256/levels;		
		for (int i = 0; i < levels; i++) {			
			int level = i * incr;
			greens[i] = new Color(0, level, 0);
		}
		
		return new ColorMap(8, greens);
	}

	/**
	 * Make N red levels 
	 * @param levels
	 * @return
	 */
	public static ColorMap redscale(int levels) {

		/*
		 * grey colormap, to be changed later
		 */
		Color[] reds = new Color[levels];
		
		int incr = 256/levels;		
		for (int i = 0; i < levels; i++) {			
			int level = i * incr;
			reds[i] = new Color(level, 0, 0);
		}
		
		return new ColorMap(8, reds);
	}

	/**
	 * Make N yellow levels 
	 * @param levels
	 * @return
	 */
	public static ColorMap yellowscale(int levels) {

		/*
		 * grey colormap, to be changed later
		 */
		Color[] yellows = new Color[levels];
		
		int incr = 256/levels;		
		for (int i = 0; i < levels; i++) {			
			int level = i * incr;
			yellows[i] = new Color(level, level, 0);
		}
		
		return new ColorMap(8, yellows);
	}

	
	/**
	 * Make N blue levels 
	 * @param levels
	 * @return
	 */
	public static ColorMap bluescale(int levels) {

		/*
		 * grey colormap, to be changed later
		 */
		Color[] blues = new Color[levels];
		
		int incr = 256/levels;		
		for (int i = 0; i < levels; i++) {			
			int level = i * incr;
			blues[i] = new Color(0, 0, level);
		}
		
		return new ColorMap(8, blues);
	}

	
	public void createColorModel(int bits, Color[] colors) {
		int size = colors.length;
		 byte[] r= new byte[size];
		 byte[] g= new byte[size];
		 byte[] b= new byte[size];
		 for (int i = 0; i < colors.length; i++) {
			r[i]=(byte)colors[i].getRed();
			g[i]=(byte)colors[i].getGreen();
			b[i]=(byte)colors[i].getBlue();
		}
		 
		 model = new IndexColorModel(bits, size,r,g,b, 0);
	}
	
	
	public IndexColorModel getColorModel(){
		return model;
	}
	
    /**
     *  Return the RAINBOW palette, sampled at the required number of intervals.
     *  rgb rgb rgb rgb rgb...
     */
    public static ColorMap rainbow(int levels)
    {
        int[] rain = {
        0x00, 0x00, 0x00, 0x7c, 0x00, 0xff, 0x78, 0x00, 0xfe, 0x73, 0x00, 0xff,
        0x6f, 0x00, 0xfe, 0x6a, 0x00, 0xff, 0x66, 0x00, 0xfe, 0x61, 0x00, 0xff,
        0x5d, 0x00, 0xfe, 0x58, 0x00, 0xff, 0x54, 0x00, 0xfe, 0x4f, 0x00, 0xff,
        0x4b, 0x00, 0xfe, 0x46, 0x00, 0xff, 0x42, 0x00, 0xfe, 0x3d, 0x00, 0xff,
        0x39, 0x00, 0xfe, 0x34, 0x00, 0xff, 0x30, 0x00, 0xfe, 0x2b, 0x00, 0xff,
        0x27, 0x00, 0xfe, 0x22, 0x00, 0xff, 0x1e, 0x00, 0xfe, 0x19, 0x00, 0xff,
        0x15, 0x00, 0xfe, 0x10, 0x00, 0xff, 0x0c, 0x00, 0xfe, 0x07, 0x00, 0xff,
        0x03, 0x00, 0xfe, 0x00, 0x02, 0xff, 0x00, 0x06, 0xfe, 0x00, 0x0b, 0xff,
        0x00, 0x0f, 0xfe, 0x00, 0x14, 0xff, 0x00, 0x18, 0xfe, 0x00, 0x1d, 0xff,
        0x00, 0x21, 0xfe, 0x00, 0x26, 0xff, 0x00, 0x2a, 0xfe, 0x00, 0x2f, 0xff,
        0x00, 0x33, 0xfe, 0x00, 0x38, 0xff, 0x00, 0x3c, 0xfe, 0x00, 0x41, 0xff,
        0x00, 0x45, 0xfe, 0x00, 0x4a, 0xff, 0x00, 0x4e, 0xfe, 0x00, 0x53, 0xff,
        0x00, 0x57, 0xfe, 0x00, 0x5c, 0xff, 0x00, 0x60, 0xfe, 0x00, 0x65, 0xff,
        0x00, 0x69, 0xfe, 0x00, 0x6e, 0xff, 0x00, 0x72, 0xfe, 0x00, 0x77, 0xff,
        0x00, 0x7a, 0xfe, 0x00, 0x80, 0xff, 0x00, 0x83, 0xfe, 0x00, 0x89, 0xff,
        0x00, 0x8c, 0xfe, 0x00, 0x92, 0xff, 0x00, 0x95, 0xfe, 0x00, 0x9b, 0xff,
        0x00, 0x9e, 0xfe, 0x00, 0xa4, 0xff, 0x00, 0xa7, 0xfe, 0x00, 0xad, 0xff,
        0x00, 0xb0, 0xfe, 0x00, 0xb6, 0xff, 0x00, 0xb9, 0xfe, 0x00, 0xbf, 0xff,
        0x00, 0xc2, 0xfe, 0x00, 0xc8, 0xff, 0x00, 0xcb, 0xfe, 0x00, 0xd1, 0xff,
        0x00, 0xd4, 0xfe, 0x00, 0xda, 0xff, 0x00, 0xdd, 0xfe, 0x00, 0xe3, 0xff,
        0x00, 0xe6, 0xfe, 0x00, 0xec, 0xff, 0x00, 0xf0, 0xfe, 0x00, 0xf5, 0xff,
        0x00, 0xf9, 0xfe, 0x00, 0xfe, 0xff, 0x00, 0xfe, 0xfa, 0x00, 0xff, 0xf7,
        0x00, 0xfe, 0xf1, 0x00, 0xff, 0xee, 0x00, 0xfe, 0xe8, 0x00, 0xff, 0xe5,
        0x00, 0xfe, 0xdf, 0x00, 0xff, 0xdc, 0x00, 0xfe, 0xd6, 0x00, 0xff, 0xd3,
        0x00, 0xfe, 0xcd, 0x00, 0xff, 0xca, 0x00, 0xfe, 0xc4, 0x00, 0xff, 0xc1,
        0x00, 0xfe, 0xbb, 0x00, 0xff, 0xb8, 0x00, 0xfe, 0xb2, 0x00, 0xff, 0xaf,
        0x00, 0xfe, 0xa9, 0x00, 0xff, 0xa6, 0x00, 0xfe, 0xa0, 0x00, 0xff, 0x9d,
        0x00, 0xfe, 0x97, 0x00, 0xff, 0x94, 0x00, 0xfe, 0x8e, 0x00, 0xff, 0x8b,
        0x00, 0xfe, 0x85, 0x00, 0xff, 0x82, 0x00, 0xfe, 0x7d, 0x00, 0xff, 0x79,
        0x00, 0xfe, 0x74, 0x00, 0xff, 0x70, 0x00, 0xfe, 0x6b, 0x00, 0xff, 0x67,
        0x00, 0xfe, 0x62, 0x00, 0xff, 0x5e, 0x00, 0xfe, 0x59, 0x00, 0xff, 0x55,
        0x00, 0xfe, 0x50, 0x00, 0xff, 0x4c, 0x00, 0xfe, 0x47, 0x00, 0xff, 0x43,
        0x00, 0xfe, 0x3e, 0x00, 0xff, 0x3a, 0x00, 0xfe, 0x35, 0x00, 0xff, 0x31,
        0x00, 0xfe, 0x2c, 0x00, 0xff, 0x28, 0x00, 0xfe, 0x23, 0x00, 0xff, 0x1f,
        0x00, 0xfe, 0x1a, 0x00, 0xff, 0x16, 0x00, 0xfe, 0x11, 0x00, 0xff, 0x0d,
        0x00, 0xfe, 0x08, 0x00, 0xff, 0x04, 0x01, 0xfe, 0x00, 0x05, 0xff, 0x00,
        0x0a, 0xfe, 0x00, 0x0e, 0xff, 0x00, 0x13, 0xfe, 0x00, 0x17, 0xff, 0x00,
        0x1c, 0xfe, 0x00, 0x20, 0xff, 0x00, 0x25, 0xfe, 0x00, 0x29, 0xff, 0x00,
        0x2e, 0xfe, 0x00, 0x32, 0xff, 0x00, 0x37, 0xfe, 0x00, 0x3b, 0xff, 0x00,
        0x40, 0xfe, 0x00, 0x44, 0xff, 0x00, 0x49, 0xfe, 0x00, 0x4d, 0xff, 0x00,
        0x52, 0xfe, 0x00, 0x56, 0xff, 0x00, 0x5b, 0xfe, 0x00, 0x5f, 0xff, 0x00,
        0x64, 0xfe, 0x00, 0x68, 0xff, 0x00, 0x6d, 0xfe, 0x00, 0x71, 0xff, 0x00,
        0x76, 0xfe, 0x00, 0x7b, 0xff, 0x00, 0x7e, 0xfe, 0x00, 0x84, 0xff, 0x00,
        0x87, 0xfe, 0x00, 0x8d, 0xff, 0x00, 0x90, 0xfe, 0x00, 0x96, 0xff, 0x00,
        0x99, 0xfe, 0x00, 0x9f, 0xff, 0x00, 0xa2, 0xfe, 0x00, 0xa8, 0xff, 0x00,
        0xab, 0xfe, 0x00, 0xb1, 0xff, 0x00, 0xb4, 0xfe, 0x00, 0xba, 0xff, 0x00,
        0xbd, 0xfe, 0x00, 0xc3, 0xff, 0x00, 0xc6, 0xfe, 0x00, 0xcc, 0xff, 0x00,
        0xcf, 0xfe, 0x00, 0xd5, 0xff, 0x00, 0xd8, 0xfe, 0x00, 0xde, 0xff, 0x00,
        0xe1, 0xfe, 0x00, 0xe7, 0xff, 0x00, 0xea, 0xfe, 0x00, 0xf0, 0xff, 0x00,
        0xf3, 0xfe, 0x00, 0xf9, 0xff, 0x00, 0xfc, 0xfe, 0x00, 0xff, 0xfc, 0x00,
        0xfe, 0xf7, 0x00, 0xff, 0xf3, 0x00, 0xfe, 0xee, 0x00, 0xff, 0xea, 0x00,
        0xfe, 0xe5, 0x00, 0xff, 0xe1, 0x00, 0xfe, 0xdc, 0x00, 0xff, 0xd8, 0x00,
        0xfe, 0xd3, 0x00, 0xff, 0xcf, 0x00, 0xfe, 0xca, 0x00, 0xff, 0xc6, 0x00,
        0xfe, 0xc1, 0x00, 0xff, 0xbd, 0x00, 0xfe, 0xb8, 0x00, 0xff, 0xb4, 0x00,
        0xfe, 0xaf, 0x00, 0xff, 0xab, 0x00, 0xfe, 0xa6, 0x00, 0xff, 0xa2, 0x00,
        0xfe, 0x9d, 0x00, 0xff, 0x99, 0x00, 0xfe, 0x94, 0x00, 0xff, 0x90, 0x00,
        0xfe, 0x8b, 0x00, 0xff, 0x87, 0x00, 0xfe, 0x83, 0x00, 0xff, 0x7e, 0x00,
        0xfe, 0x7a, 0x00, 0xff, 0x75, 0x00, 0xfe, 0x71, 0x00, 0xff, 0x6c, 0x00,
        0xfe, 0x68, 0x00, 0xff, 0x63, 0x00, 0xfe, 0x5f, 0x00, 0xff, 0x5a, 0x00,
        0xfe, 0x56, 0x00, 0xff, 0x51, 0x00, 0xfe, 0x4d, 0x00, 0xff, 0x48, 0x00,
        0xfe, 0x44, 0x00, 0xff, 0x3f, 0x00, 0xfe, 0x3b, 0x00, 0xff, 0x36, 0x00,
        0xfe, 0x32, 0x00, 0xff, 0x2d, 0x00, 0xfe, 0x29, 0x00, 0xff, 0x24, 0x00,
        0xfe, 0x20, 0x00, 0xff, 0x1b, 0x00, 0xfe, 0x17, 0x00, 0xff, 0x12, 0x00,
        0xfe, 0x0e, 0x00, 0xff, 0x09, 0x00, 0xff, 0x05, 0x00, 0xff, 0xff, 0xff };

		/*
		 * grey colormap, to be changed later
		 */
		Color[] cols = new Color[levels];
		
		int incr = 768/(levels*3);		
		for (int i = 0; i < levels; i++) {
			int level = i * incr;
			cols[i] = new Color(rain[level], rain[level+1], rain[level+2]);
		}
		
		return new ColorMap(8, cols);
    }
	 
    
    public static void main(String args[]) {
    	try {
			greyscale(256).getColorbar(16, new File("cbar.png"));
		} catch (ThinklabIOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    }
}
