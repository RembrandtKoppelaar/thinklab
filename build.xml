<?xml version="1.0" encoding="UTF-8"?>
<project name="Thinklab build file" default="help" basedir=".">
	<property name="app.name" value="thinklab" />
	<property name="app.version" value="0.8.0" />
    <property environment="env"/>
	<property name="build.home" value="${basedir}/build" />
	<property name="thinklab.inst" value="${env.THINKLAB_HOME}"/>


	<path id="classpath">
		<fileset dir="lib" includes="*.jar" />
	</path>

	<typedef resource="org/java/plugin/tools/ant/jpf-tasks.properties">
		<classpath refid="classpath" />
	</typedef>

	<target name="help">
		<echo>
			<![CDATA[
${app.name} build file:
clean - cleans up the project build folder
build - builds entire project
run   - runs application
check - checks plug-ins integrity
docs  - generates plug-ins documentation
dist  - creates binary and source distribution packages
test  - runs some tests
]]>
		</echo>
	</target>

	<target name="clean" description="Cleans up the project build folder">
		<tstamp>
			<format property="dt-stamp" pattern="yyyy-MM-dd-HH-mm" />
			<format property="d-stamp" pattern="yyyy-MM-dd" />
		</tstamp>
		<delete dir="${build.home}" quiet="true" />
	</target>

	<target name="-init">
		<mkdir dir="${build.home}" />
	</target>

	<target name="-build-plugins">
		<mkdir dir="${build.home}/plugins" />
		<ant dir="plugins/org.integratedmodelling.thinklab.core" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.opal" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.searchengine" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.agriculture" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.sql" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.authentication" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.idv" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.commandline" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.riskwiz" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.clojure" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.shell" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.corescience" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.mca" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.geospace" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.time" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.currency" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.dolce" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.dynamicmodelling" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.modelling" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.ecology" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.metadata" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.rules" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.thinkscape" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.workflow" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.tclj" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.http" target="${target}" />
		<ant dir="plugins/org.integratedmodelling.thinklab.http.geospace" target="${target}" />
	</target>

	<target name="build" depends="-init" description="Builds entire project">
		<antcall target="-build-plugins">
			<param name="target" value="build" />
		</antcall>
		<copy todir="${build.home}/lib">
			<fileset dir="lib" includes="*.jar" />
		</copy>
		<copy todir="${build.home}">
			<fileset dir="." includes="bin/*.*,*.*" excludes=".*,todo*" />
		</copy>
		<jpf-version basedir="${build.home}/plugins"
		             includes="*/plugin.xml,*/plugin-fragment.xml"
		             versionsfile="${basedir}/plugins/versions.properties"
		             timestampversion="true" />
	</target>

	<target name="run" depends="build" description="Runs application">
		<java jar="${build.home}/lib/im-boot.jar"
		      dir="${build.home}"
		      fork="true" />
	</target>

	<target name="check"
	        depends="build"
	        description="Checks plug-ins integrity">
		<jpf-check basedir="${basedir}/plugins"
		           includes="*/plugin.xml,*/plugin-fragment.xml"
		           verbose="true"
		           usepathresolver="true" />
	</target>

	<target name="docs"
	        depends="build"
	        description="Generates plug-ins documentation">
		<delete dir="${build.home}/docs" />
		<mkdir dir="${build.home}/docs" />
		<antcall target="-build-plugins">
			<param name="target" value="docs" />
		</antcall>
		<jpf-doc basedir="${build.home}/plugins"
		         includes="*/plugin.xml,*/plugin-fragment.xml"
		         destdir="${build.home}/docs" />
	</target>

	<target name="install"
		depends="build"
		description="Install thinklab in THINKLAB_HOME (must be defined)">
		<copy todir="${thinklab.inst}">
			<fileset dir="${build.home}" includes="bin,**/*" />
		</copy>
		<chmod file="${thinklab.inst}/bin/thinklab.sh" perm="755"/>
		<chmod file="${thinklab.inst}/bin/tclj.sh" perm="755"/>
	</target>
	
	<target name="dist"
	        depends="clean,build,docs"
	        description="Prepares distribution packages">
		<!-- comment out the next two tasks, which would create zip archives for each
		     plugin and delete the original unpacked distribution. If that is done,
		     the core plugin needs a much more sophisticated strategy to read 
		     the protege support files. Can be put back in when we phase out
		     protege and switch to OWLAPI. -->
		<!-- <jpf-zip basedir="${build.home}/plugins"
		         includes="*/plugin.xml,*/plugin-fragment.xml"
		         destdir="${build.home}/plugins" />
		<delete includeemptydirs="true">
			<fileset dir="${build.home}/plugins">
				<include name="**/*" />
				<exclude name="*.zip" />
			</fileset>
		</delete> -->
		<zip destfile="${build.home}/${app.name}-bin-${app.version}.zip"
		     duplicate="fail"
		     update="false">
			<fileset dir="${build.home}" includes="bin,**/*" />
		</zip>
		<zip destfile="${build.home}/${app.name}-src-${app.version}.zip"
		     duplicate="fail"
		     update="false">
			<fileset dir="${basedir}"
			         excludes="build,**/classes/**,.check*,.fb*,nbproject/private/**,build/**,logs/**,data/**,temp/**,*.zip,todo.txt,plugins/org.jpf.demo.toolbox.ftpmonitor/**" />
		</zip>
		<delete includeemptydirs="true">
			<fileset dir="${build.home}">
				<include name="**/*" />
				<exclude name="${app.name}-???-${app.version}.zip" />
			</fileset>
		</delete>
	</target>

	<target name="test" depends="build" description="Some tests">
		<jpf-pack basedir="${build.home}/plugins"
		          includes="*/plugin.xml,*/plugin-fragment.xml"
		          destfile="${build.home}/all-plugins.jpa" />
		<mkdir dir="${build.home}/all-plugins-extracted" />
		<jpf-unpack srcfile="${build.home}/all-plugins.jpa"
		            destdir="${build.home}/all-plugins-extracted" />
	</target>
</project>
